---
description: 
globs: 
alwaysApply: false
---
実装の際は以下を考慮してください。

・コードフォーマットを統一してください。
・SQLインジェクション防止のため、SQLクエリにプリペアドステートメントを使用してください。
・重複しているコードを関数化して共通化してください。
・不要なコードやコメントを削除して、コードをクリーンアップしてください。
・ユーザー入力のバリデーションを追加して、想定外の入力に対処してください。
・ハードコーディングされた秘密情報を環境変数や設定ファイルに移してください。
・例外処理を整理し、すべての例外を適切にキャッチしてログ出力してください。
・デバッグ用のログを追加して、トラブルシューティングを容易にしてください。
・コードをもう少しモジュール化してください。
・マジックナンバーを定数に置き換えてください。
・コードのコメントを追加して、処理の意図がわかるようにしてください。
・命名規則を統一し、変数名や関数名をわかりやすいものに変更してください。
・長すぎる関数を分割して、複数の小さな関数にしてください。
・外部API呼び出しにリトライ処理を追加し、一時的な障害に対処してください。
・タイムアウトの設定を追加して、外部リソースから応答がない場合にハングしないようにしてください。
・エラーメッセージをユーザーにとってわかりやすい内容に変更してください。
・自動テストケースを追加して、重要な機能の挙動を保証してください。
・設定値をハードコードせず、設定ファイルや環境変数から読み込むようにしてください。
・クラス設計を見直し、単一責任の原則に沿ってリファクタリングしてください。
・ネストが深いロジックを平坦化して、コードの読みやすさを改善してください。
・複雑な条件分岐をリファクタリングして、わかりやすいロジックにしてください。
・APIエンドポイントに認証と認可のチェックを追加してください。
・エラー発生時にリソースリークがないように、リソース解放処理を追加してください。
・不要な計算やI/Oを減らして、パフォーマンスを改善してください。
・メモリリークを防ぐため、使用後のリソースを確実に解放してください。
・スレッドセーフになるように共有データへのアクセスにロック機構を導入してください。
・デザインパターンを適用できる部分があれば、導入してください (例: ファクトリーパターンなど)。
・脆弱性が報告されているライブラリを最新の安全なバージョンに更新してください。

・並列処理または非同期処理を利用して、処理のスループットを向上させてください。